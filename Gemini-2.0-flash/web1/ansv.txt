Вот пример простого веб-сайта на Python с использованием фреймворка Flask. Flask - это легковесный и гибкий фреймворк для создания веб-приложений.

1. Установите Flask:

</>
Bash
pip install Flask


2. Создайте файл app.py (или любое другое имя) со следующим кодом:

</>
Python
from flask import Flask, render_template

app = Flask(__name__)

# Определение маршрута для главной страницы
@app.route("/")
def home():
    return render_template("index.html")

# Определение маршрута для страницы "О нас"
@app.route("/about")
def about():
    return render_template("about.html")

# Определение маршрута для страницы "Контакты"
@app.route("/contact")
def contact():
    return render_template("contact.html")

# Пример передачи данных в шаблон
@app.route("/user/<username>")
def user_profile(username):
    return render_template("user.html", username=username)

if __name__ == "__main__":
    app.run(debug=True)


3. Создайте папку templates в той же директории, что и app.py. Внутри папки templates создайте три файла HTML:

templates/index.html:

</>
Html
    <!DOCTYPE html>
    <html>
    <head>
        <title>Главная страница</title>
    </head>
    <body>
        <h1>Добро пожаловать на наш сайт!</h1>
        <p>Это главная страница.</p>
        <a href="/about">О нас</a> | <a href="/contact">Контакты</a>
    </body>
    </html>
    

templates/about.html:

</>
Html
    <!DOCTYPE html>
    <html>
    <head>
        <title>О нас</title>
    </head>
    <body>
        <h1>О нас</h1>
        <p>Мы - команда разработчиков, создающих замечательные сайты.</p>
        <a href="/">Главная</a> | <a href="/contact">Контакты</a>
    </body>
    </html>
    

templates/contact.html:

</>
Html
    <!DOCTYPE html>
    <html>
    <head>
        <title>Контакты</title>
    </head>
    <body>
        <h1>Контакты</h1>
        <p>Вы можете связаться с нами по электронной почте: info@example.com</p>
        <a href="/">Главная</a> | <a href="/about">О нас</a>
    </body>
    </html>
    

templates/user.html:

</>
Html
    <!DOCTYPE html>
    <html>
    <head>
        <title>Профиль пользователя</title>
    </head>
    <body>
        <h1>Профиль пользователя: {{ username }}</h1>
        <p>Добро пожаловать, {{ username }}!</p>
        <a href="/">Главная</a>
    </body>
    </html>
    

4. Запустите приложение:

Откройте терминал, перейдите в директорию, где находится app.py, и выполните команду:

</>
Bash
python app.py


5. Откройте сайт в браузере:

Перейдите по адресу http://127.0.0.1:5000/ или http://localhost:5000/ в вашем браузере.

Описание кода:

app = Flask(__name__): Создает экземпляр приложения Flask.
@app.route("/"): Декоратор, который связывает функцию home() с маршрутом / (главная страница).
def home():: Функция, которая будет выполняться при запросе главной страницы.
return render_template("index.html"): Возвращает HTML-шаблон index.html. Flask ищет шаблоны в папке templates.
render_template(): Функция Flask, которая обрабатывает шаблоны Jinja2 (синтаксис, используемый в HTML-файлах). Она подставляет переменные и генерирует окончательный HTML.
@app.route("/about"), @app.route("/contact"), @app.route("/user/"): Аналогичные маршруты для страниц "О нас", "Контакты" и "Профиль пользователя". Обратите внимание на в маршруте пользователя. Это динамический параметр, который будет передан в функцию user_profile().
{{ username }}: В HTML-шаблоне user.html используется синтаксис Jinja2 для отображения значения переменной username, переданной из Python.
if __name__ == "__main__":: Этот блок кода гарантирует, что приложение запустится только при непосредственном запуске файла app.py.
app.run(debug=True): Запускает веб-сервер Flask в режиме отладки. Режим отладки автоматически перезагружает сервер при изменении кода.

Ключевые моменты:

Маршруты: Маршруты определяют, какие URL-адреса связаны с какими функциями.
Шаблоны: Шаблоны - это файлы HTML, которые содержат структуру и содержимое ваших страниц. Flask использует Jinja2 для обработки шаблонов и подстановки переменных.
render_template(): Ключевая функция для отображения HTML-страниц.
debug=True: Режим отладки позволяет видеть ошибки и автоматически перезагружать сервер при изменении кода. Не используйте его в production-среде!

Что можно улучшить:

CSS: Добавьте CSS для стилизации страниц и улучшения внешнего вида. Создайте папку static и разместите там файлы CSS. Затем подключите CSS-файлы в HTML-шаблонах.
Более сложные шаблоны: Используйте более сложные возможности Jinja2, такие как циклы, условные выражения и наследование шаблонов.
База данных: Используйте базу данных для хранения и управления данными. Flask поддерживает различные базы данных, такие как SQLite, MySQL и PostgreSQL.
Формы: Добавьте формы для сбора пользовательских данных. Используйте библиотеку Flask-WTF для упрощения работы с формами.
Аутентификация: Добавьте систему аутентификации для управления пользователями и их доступом к различным страницам.

Этот пример представляет собой очень простой веб-сайт. С помощью Flask вы можете создавать гораздо более сложные и функциональные веб-приложения.